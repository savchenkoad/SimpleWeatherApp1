@{
	ViewBag.title = "Home";

	WeatherAndPageNameWrapperModel wrapper = Model;

	List<CityWeather> weathers = wrapper.CityWeatherList;
	string pageName = wrapper.PageName;

	int blockContainersCount = (int)Math.Ceiling((double)weathers.Count / 3);

	Queue<CityWeather> queue = new Queue<CityWeather>();
	Queue<string> colors = new Queue<string>();

	for (int i = 0; i < weathers.Count; i++)
	{
		queue.Enqueue(weathers[i]);
		colors.Enqueue(weathers[i].BackgroundImageLink);
	}
}

<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="~/Styles.css" />
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Libre+Franklin:wght@600&display=swap" rel="stylesheet">
</head>
<body>
	<div class="containers">
		@for (int i = 0; i < blockContainersCount; i++)
		{
			<div class="container-block">
				@for (int j = 0; j < 3; j++)
				{
					@if (queue.Count() == 0)
					{
						break;
					}
					<div class="container" style="background-image: url(@colors.Dequeue()); background-size: cover;">
						<div class="container-inner-text">
							@{
								CityWeather current = queue.Dequeue();
							}
							<div class="container-inner-left container-inner-size">
								<div class="container-left-text">
									<p class="city-name">@current.CityName</p>
									<p class="time font">@current.DateAndTime.ToShortTimeString()</p>
									<a href="/details/@current.CityName" class="details">Details</a>
								</div>
							</div>
							<div class="container-inner-right container-inner-size">
								<div class="container-right-text">
									<p class="temperature-degrees">@current.TemperatureFahrenheit</p>
									<p class="temperature-sign sign-font">℉</p>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
</body>
</html>